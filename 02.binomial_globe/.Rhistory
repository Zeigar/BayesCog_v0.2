g <- ggplot(df, aes(p_grid, posterior))
g <- g + geom_point() + geom_line(size = 3)
g
g <- ggplot(df, aes(p_grid, posterior))
g <- g + geom_point(size = 3, shape = 21) + geom_line(size = 2)
g
g <- ggplot(df, aes(p_grid, posterior))
g <- g + geom_point(size = 4, shape = 21) + geom_line(size = 2)
g
g <- ggplot(df, aes(p_grid, posterior))
g <- g + geom_line(size = 2) + geom_point(size = 4, shape = 21)
g
g <- ggplot(df, aes(p_grid, posterior))
g <- g + geom_line(size = 2) + geom_point(size = 4, shape = 21, fill='white')
g
g <- ggplot(df, aes(p_grid, posterior))
g <- g + geom_line(size = 2) + geom_point(size = 5, shape = 21, fill='white')
g
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
df <- data.frame(p_grid=p_grid, posterior=posterior)
g <- ggplot(df, aes(p_grid, posterior))
g <- g + geom_line(size = 2) + geom_point(size = 5, shape = 21, fill='white')
g <- g + myconfig
g
plot( p_grid , posterior , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
mtext( "20 points" )
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
df <- data.frame(p_grid=p_grid, posterior=posterior)
g <- ggplot(df, aes(p_grid, posterior))
g <- g + geom_line(size = 2) + geom_point(size = 5, shape = 21, fill='white')
g <- g + myconfig + ylab("posterior probability") +
xlab("probability of water") + ggtitle('20 points')
g
rm(g)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
df <- data.frame(p_grid=p_grid, posterior=posterior)
g <- ggplot(df, aes(p_grid, posterior))
g <- g + geom_line(size = 2) + geom_point(size = 5, shape = 21, fill='white')
g <- g + myconfig + ylab("posterior probability") +
xlab("probability of water") + ggtitle('20 points')
g
g <- ggplot(df, aes(p_grid, posterior))
g <- g + geom_line(size = 2) + geom_point(size = 5, shape = 21, fill='white')
g <- g + myconfig + ylab("posterior probability") +
xlab("probability of water")
g
g <- ggplot(df, aes(p_grid, posterior))
g <- g + geom_line(size = 2) + geom_point(size = 5, shape = 21, fill='white')
g <- g + myconfig + ylab("posterior probability") + xlab("probability of water") + ggtitle('20 points')
g
g <- ggplot(df, aes(p_grid, posterior))
g <- g + geom_line(size = 2) + geom_point(size = 5, shape = 21, fill='white')
g <- g + myconfig + ylab("posterior probability") + xlab("probability of water")
g
graphics.off()
df <- data.frame(p_grid=p_grid, posterior=posterior)
g <- ggplot(df, aes(p_grid, posterior))
g <- g + geom_line(size = 2) + geom_point(size = 5, shape = 21, fill='white')
g <- g + myconfig + ylab("posterior probability") + xlab("probability of water") + ggtitle('20 points')
g
graphics.off()
df <- data.frame(p_grid=p_grid, posterior=posterior)
g <- ggplot(df, aes(p_grid, posterior))
g <- g + geom_line(size = 2) + geom_point(size = 5, shape = 21, fill='white')
g <- g + myconfig + labs(x = 'probability of water', y = 'posterior probability', title = '20 points')
g
?dbinom
g=g + stat_function(fun = dbinom, args = list(size=9 , prob = 0.64), size = 6, colour = 'skyblue')
g
?geom_line
graphics.off()
df <- data.frame(p_grid=p_grid, posterior=posterior)
g <- ggplot(df, aes(p_grid))
g <- g + geom_line(y = posterior,size = 2) + geom_point(y=posterior,size = 5, shape = 21, fill='white')
g <- g + myconfig + labs(x = 'probability of water', y = 'posterior probability', title = '20 points')
g
g=g + stat_function(fun = dbinom, args = list(size=9 , prob = 0.64), size = 6, colour = 'skyblue')
g
g <- ggplot(df, aes(p_grid))
g=g + stat_function(fun = dbinom, args = list(size=9 , prob = 0.64), size = 6, colour = 'skyblue')
g
warnings()
graphics.off()
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
df <- data.frame(p_grid=p_grid, posterior=posterior)
g <- ggplot(df, aes(p_grid, posterior))
g <- g + geom_line(size = 2) + geom_point(size = 5, shape = 21, fill='white')
g <- g + myconfig + labs(x = 'probability of water', y = 'posterior probability', title = '20 points')
g
rm(list = ls())
graphics.off()
source('E:/teaching/BayesCog/binomial_globe/_scripts/binomial_globe_grid.R')
paste0(as.character(n_grid),'points')
rm(list = ls())
graphics.off()
source('E:/teaching/BayesCog/binomial_globe/_scripts/binomial_globe_grid.R')
source('E:/teaching/BayesCog/binomial_globe/_scripts/binomial_globe_grid.R')
source('E:/teaching/BayesCog/binomial_globe/_scripts/binomial_globe_grid.R')
ggsave(plot = g, "_plots/binomial_grid.png", width = 6, height = 4, type = "cairo-png", units = "in")
getwd()
dir()
dir('_scripts/')
source('E:/teaching/BayesCog/binomial_globe/_scripts/binomial_globe_grid_master.R')
w <- 6
N <- 9
dataList <- list(w=w, N=N)
# =============================================================================
#### Running Stan ####
# =============================================================================
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
modelFile <- '_scripts/binomial_globe_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
plot_dens_cmb <- stan_dens(fit_globe, separate_chains = F)
stan_dens(fit_globe, separate_chains = F)
stan_dens(fit_globe, separate_chains = F, color = 'skyblue')
stan_dens(fit_globe, separate_chains = F, fill_color = 'skyblue')
stan_dens(fit_globe, separate_chains = F, fill = 'skyblue')
stan_dens(fit_globe, separate_chains = F, fill = 'skyblue', position = "stack")
stan_dens(fit_globe, separate_chains = F, fill = 'skyblue')
stan_dens(fit_globe, separate_chains = F, fill = 'skyblue', position = "stack")
plot_dens_cmb <- stan_dens(fit_globe, separate_chains = F, fill = 'skyblue')
ggsave(plot = plot_dens_cmb, "_plots/dens_cmb.png", width = 6, height = 4, type = "cairo-png", units = "in")
p_start <- 0
p_end   <- 1
n_grid  <- 50 # 100
w <- 6
N <- 9
# define grid
p_grid <- seq( from = p_start , to = p_end , length.out = n_grid )
# define prior
prior <- rep(1 , n_grid)
# compute likelihood at each value in grid
likelihood <- dbinom(w , size = N , prob = p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
# =============================================================================
#### Plot ####
# =============================================================================
library(ggplot2)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
df <- data.frame(p_grid=p_grid, posterior=posterior)
g <- ggplot(df, aes(p_grid, posterior))
g <- g + geom_line(size = 2) + geom_point(size = 5, shape = 21, fill='white')
g <- g + myconfig + labs(x = 'probability of water',
y = 'posterior probability', title = paste0(as.character(n_grid),' points'))
print(g)
rm(list=ls(all=TRUE))
w <- 6
N <- 9
dataList <- list(w=w, N=N)
# =============================================================================
#### Running Stan ####
# =============================================================================
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
modelFile <- '_scripts/binomial_globe_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
print(fit_globe)
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
# =============================================================================
#### Model Summary and Diagnostics ####
# =============================================================================
print(fit_globe)
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
stan_trace(fit_globe, pars = 'p', inc_warmup = F)
stan_trace(fit_globe, pars = 'p', inc_warmup = T)
stan_dens(fit_globe, separate_chains = F, fill = 'skyblue')
stan_dens(fit_globe, separate_chains = T)
plot_trace_excl_warm_up <- stan_trace(fit_globe, pars = 'p', inc_warmup = F)
plot_trace_incl_warm_up <- stan_trace(fit_globe, pars = 'p', inc_warmup = T)
ggsave(plot = plot_trace_excl_warm_up, "_plots/trace_excl_warmup.png", width = 6, height = 4, type = "cairo-png", units = "in")
ggsave(plot = plot_trace_incl_warm_up, "_plots/trace_incl_warmup.png", width = 6, height = 4, type = "cairo-png", units = "in")
plot_dens_cmb <- stan_dens(fit_globe, separate_chains = F, fill = 'skyblue')
plot_dens_sep <- stan_dens(fit_globe, separate_chains = T)
ggsave(plot = plot_dens_cmb, "_plots/dens_cmb.png", width = 6, height = 4, type = "cairo-png", units = "in")
ggsave(plot = plot_dens_sep, "_plots/dens_sep.png", width = 6, height = 4, type = "cairo-png", units = "in")
R.version
stan_version()
R.version()
rm(list=ls(all=TRUE))
w <- 6
N <- 9
dataList <- list(w=w, N=N)
# =============================================================================
#### Running Stan ####
# =============================================================================
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
modelFile <- '_scripts/binomial_globe_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
rm(list=ls(all=TRUE))
w <- 6
N <- 9
dataList <- list(w=w, N=N)
library(rstan)
rstan_options(auto_write = TRUE)
rstan:::rstudio_stanc("_scripts/binomial_globe_model.stan")
rstan:::rstudio_stanc("_scripts/binomial_globe_model.stan")
rstan:::rstudio_stanc("_scripts/binomial_globe_model.stan")
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
modelFile <- '_scripts/binomial_globe_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
cat("Calling", nChains, "simulations in Stan... \n")
cat("Finishing", modelFile, "model simulation ... \n")
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
class(fit_globe)
rm(list=ls(all=TRUE))
w <- 6
N <- 9
dataList <- list(w=w, N=N)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
modelFile <- '_scripts/binomial_globe_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
print(fit_globe)
stan_dens(fit_globe, separate_chains = F, fill = 'skyblue')
plot_dens_sep <- stan_dens(fit_globe, separate_chains = T)
stan_dens(fit_globe, separate_chains = T)
stan_trace(fit_globe, pars = 'p', inc_warmup = F)
mcmc_trace(fit_globe, pars = 'p')
library(bayesplot)
mcmc_trace(fit_globe, pars = 'p')
mcmc_trace(as.matrix(fit_globe), pars = 'p')
mcmc_trace_highlight(as.matrix(fit_globe), pars = 'p')
mcmc_trace(as.matrix(fit_globe), pars = 'p',n_warmup = 1000)
mcmc_trace(as.matrix(fit_globe), pars = 'p',n_warmup = 2000)
x <- example_mcmc_draws(chains = 4, params = 6)
dim(x)
dim(as.matrix(fit_globe))
pp = extract(fit_globe, pars='p')
dim(pp)
length(pp)
length(pp$p)
dim(pp$p)
dim(as.array(fit_globe))
dim(as.matrix(fit_globe))
mcmc_trace(as.array(fit_globe), pars = 'p',n_warmup = 1000)
mcmc_trace(as.array(fit_globe), pars = 'p',n_warmup = 5000)
mcmc_trace(as.array(fit_globe), pars = 'p',n_warmup = 500)
stan_trace(fit_globe, pars = 'p', inc_warmup = F)
mcmc_trace_highlight(as.array(fit_globe), pars = 'p',n_warmup = 500)
mcmc_rhat(fit_globe)
mcmc_rhat(as.array(fit_globe))
mcmc_rhat(as.matrix(fit_globe))
?rhat
rhat(fit_globe)
x=rhat(fit_globe)
x
mcmc_rhat(rhat (fit_globe))
mcmc_hist(as.array(fit_globe), pars = 'p')
stan_hist(fit_globe, pars='p')
mcmc_hist(as.array(fit_globe), pars = 'p')
mcmc_hist(as.array(fit_globe), pars = 'p', bins=10)
mcmc_hist(as.array(fit_globe), pars = 'p', binwidth = =10)
mcmc_hist(as.array(fit_globe), pars = 'p', binwidth =10)
mcmc_hist(as.array(fit_globe), pars = 'p', binwidth =100)
mcmc_hist(as.array(fit_globe), pars = 'p')
mcmc_hist(as.array(fit_globe), pars = 'p', binwidth = 30)
mcmc_dens(as.array(fit_globe), pars = 'p')
mcmc_dens_overlay(as.array(fit_globe), pars = 'p')
mcmc_dens_chains(as.array(fit_globe), pars = 'p')
mcmc_dens_chains_data (as.array(fit_globe), pars = 'p')
mcmc_violin (as.array(fit_globe), pars = 'p')
stan_dens(fit_globe, separate_chains = T)
plot_trace_excl_warm_up <- stan_trace(fit_globe, pars = 'p', inc_warmup = F)
plot_trace_incl_warm_up <- stan_trace(fit_globe, pars = 'p', inc_warmup = T)
ggsave(plot = plot_trace_excl_warm_up, "_plots/trace_excl_warmup.png", width = 6, height = 4, type = "cairo-png", units = "in")
ggsave(plot = plot_trace_incl_warm_up, "_plots/trace_incl_warmup.png", width = 6, height = 4, type = "cairo-png", units = "in")
plot_dens_cmb <- stan_dens(fit_globe, separate_chains = F, fill = 'skyblue')
plot_dens_sep <- stan_dens(fit_globe, separate_chains = T)
ggsave(plot = plot_dens_cmb, "_plots/dens_cmb.png", width = 6, height = 4, type = "cairo-png", units = "in")
ggsave(plot = plot_dens_sep, "_plots/dens_sep.png", width = 6, height = 4, type = "cairo-png", units = "in")
rstan:::rstudio_stanc("_scripts/binomial_globe_model.stan")
p_start <- 0
p_end   <- 1
n_grid  <- 50
w <- 6
N <- 9
p_grid <- seq( from = p_start , to = p_end , length.out = n_grid )
p_grid
prior <- rep(1 , n_grid)
plot(p_grid, prior)
w <- 2#6
N <- 3#9
likelihood <- dbinom(w , size = N , prob = p_grid )
plot(p_grid, likelihood)
w <- 1#6
N <- 2#9
likelihood <- dbinom(w , size = N , prob = p_grid )
plot(p_grid, likelihood)
unstd.posterior <- likelihood * prior
plot(p_grid, unstd.posterior)
posterior <- unstd.posterior / sum(unstd.posterior)
plot(p_grid, posterior)
rm(list=ls(all=TRUE))
w <- 6
N <- 9
dataList <- list(w=w, N=N)
str(dataList)
dataList$w
library(rstan)
rstan_options(auto_write = TRUE)
modelFile <- '_scripts/binomial_globe_model.stan'
nChains   <- 4
nIter     <- 2000
nWarmup   <- floor(nIter/2)
nThin     <- 1
modelFile <- '_scripts/binomial_globe_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
modelFile
cat("Estimating", modelFile, "model... \n")
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
print(fit_globe)
#stan_trace(fit_globe)
class(fit_globe)
stan_trace(fit_globe, pars= 'p')
stan_trace(fit_globe, pars= 'p')
rm(list=ls(all=TRUE))
w <- 6
N <- 9
dataList <- list(w=w, N=N)
# =============================================================================
#### Running Stan ####
# =============================================================================
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
modelFile <- '_scripts/binomial_globe_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
stan_trace(fit_globe, pars= 'p')
stan_dens(fit_globe, pars= 'p')
stan_plot(fit_globe, pars= 'p')
stan_plot(fit_globe, pars= 'p', show_density=T)
? stan_plot
stan_plot(fit_globe, pars= 'p', show_density=T, ci_level= .9, outer_level = .99)
stan_plot(fit_globe, pars= 'p', show_density=T, ci_level= .9, outer_level = .99, fill_colr = 'blue')
stan_plot(fit_globe, pars= 'p', show_density=T, ci_level= .9, outer_level = .99, fill_color = 'blue')
pp = stan_plot(fit_globe, pars= 'p', show_density=T, ci_level= .9, outer_level = .99, fill_color = 'blue')
class(p)
class(pp)
pp = stan_plot(fit_globe, pars= 'p', show_density=T, ci_level= .9, outer_level = .99, fill_color = 'deeppink4')
pp = stan_plot(fit_globe, pars= 'p', show_density=T, ci_level= .9, outer_level = .99, fill_color = #000000)
pp = stan_plot(fit_globe, pars= 'p', show_density=T, ci_level= .9, outer_level = .99, fill_color = '#000000')
